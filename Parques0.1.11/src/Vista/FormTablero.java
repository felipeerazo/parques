/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.Agente;
import Controlador.CtrlJSON;
import Controlador.CtrlReglas;
import Modelo.Ficha;
import jade.gui.GuiEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Felipe
 */
public class FormTablero extends javax.swing.JFrame {

    int diferenciaX;
    int diferenciaY;
    private CtrlReglas ctrlReglas;
    Ficha fichaSeleccionada;//ficha que queda marcada con el recuadro naranja
    int[] dados = {-1, -1};//si alg√∫n valor es -1, ya fue usado para moverse o es el inicio del juego
    int contadorIntentosDePares = 0;
    private boolean b = false;
    Agente agente;
    int iniciar = 0;
    //private String colorJugador = "";

    /**
     * Creates new form FormTablero
     *
     * @param ag
     */
    public FormTablero(Agente ag) {
        initComponents();
        this.agente = ag;
        agente.setFichas(panelTablero1.fichas);
        agente.setCeldas(panelTablero1.celdas);
        jLabel2.setText("Tu eres el color " + agente.getColorJugador());
        //jButton4.setVisible(false);
        this.setLocation(0, 0);
        addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        ctrlReglas = new CtrlReglas();
        // ctrlReglas.setNumJugadores(4);
        ctrlReglas.setjLabel(labelColor);
        ctrlReglas.getSiguienteTurno();
//        SacarDeCarcel(0);
        //panelTablero1.fichas[1][0].moverseHasta(panelTablero1.celdas[9][0]);
        labelNotificaciones.setText("carcel");
    }

    public void recibirNum(int jugadores) {
        getCtrlReglas().setNumJugadores(jugadores);
    }

    private void formMousePressed(java.awt.event.MouseEvent evt) {
        diferenciaX = evt.getXOnScreen() - this.getLocationOnScreen().x;
        diferenciaY = evt.getYOnScreen() - this.getLocationOnScreen().y;
    }

    private void formMouseDragged(java.awt.event.MouseEvent evt) {
        this.setLocation(evt.getXOnScreen() - diferenciaX, evt.getYOnScreen() - diferenciaY);
    }

    public void empezar() throws InterruptedException {

        if (agente.getTipoJuego().equals("automatico")) {
            if (agente.getColorJugador().equals("rojo")) {
                jButton4.setVisible(true);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        panelTablero1 = new Vista.PanelTablero();
        jButton2 = new javax.swing.JButton();
        labelDado0 = new javax.swing.JLabel();
        labelDado1 = new javax.swing.JLabel();
        labelColor = new javax.swing.JLabel();
        labelNotificaciones = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jButton1.setText("Fin");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panelTablero1.setBackground(new java.awt.Color(255, 255, 255));
        panelTablero1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelTablero1.setPreferredSize(new java.awt.Dimension(1015, 470));
        panelTablero1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelTablero1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTablero1Layout = new javax.swing.GroupLayout(panelTablero1);
        panelTablero1.setLayout(panelTablero1Layout);
        panelTablero1Layout.setHorizontalGroup(
            panelTablero1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelTablero1Layout.setVerticalGroup(
            panelTablero1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 587, Short.MAX_VALUE)
        );

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/dados.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        labelDado0.setText("0");

        labelDado1.setText("0");

        labelColor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelColor.setText("rojo");

        labelNotificaciones.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N

        jButton4.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jButton4.setText("Iniciar Juego");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("empezar a enviar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("Turno de:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(82, 82, 82)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelDado0, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDado1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelColor, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton5)
                        .addComponent(jButton4)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelTablero1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                    .addComponent(labelNotificaciones, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelNotificaciones, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelColor)
                            .addComponent(jLabel3))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labelDado0)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelDado1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(44, 44, 44)
                        .addComponent(jButton4)
                        .addGap(43, 43, 43)
                        .addComponent(jButton5))
                    .addComponent(panelTablero1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:              
        labelNotificaciones.setText("");
        if (!agente.getColorJugador().equalsIgnoreCase(labelColor.getText())) {
            labelNotificaciones.setText("No es tu turno :P");
            return;
        }
        if (getCtrlReglas().estaEnCarcel()) {
            if (b) {
                lanzarDados2();
            } else {
                lanzarDados3();
//                dados[0] = 1;
//                dados[1] = 1;
            }
            labelNotificaciones.setText("Carcel. Intentos: " + (contadorIntentosDePares + 1));
            if (dados[0] == dados[1]) {
                labelNotificaciones.setText("sale");
                ctrlReglas.getContadorDePares()[ctrlReglas.getIndiceTurno()]++;
                //ponerlos en salida                
                SacarDeCarcel(getCtrlReglas().getIndiceTurno());
                //comer lo que hay en salida
                comer(panelTablero1.fichas[getCtrlReglas().getIndiceTurno()][0], getCtrlReglas().getIndiceTurno());
                contadorIntentosDePares = 0;
                dados[0] = -1;
                dados[1] = -1;
                return;
            } else {
                contadorIntentosDePares++;
                if (contadorIntentosDePares == 3) {
                    labelNotificaciones.setText("No puede hacer m√°s intentos para salir de la carcel");
                    contadorIntentosDePares = 0;
                    dados[0] = -1;
                    dados[1] = -1;
                    //ctrlReglas.getContadorDePares()[ctrlReglas.getIndiceTurno()] = 0;
                    getCtrlReglas().getSiguienteTurno();
                }
            }
        } //si no est√° en la carcel
        else if (dados[0] == -1 && dados[1] == -1) {
            if (b) {
                lanzarDados2();
            } else {
                lanzarDados3();
//                dados[0] = 1;
//                dados[1] = 1;
            }
            if (dados[0] != dados[1]) {
                getCtrlReglas().getSiguienteTurno();
            }
        } else {
            labelNotificaciones.setText("No se ha movido con el valor de los dados");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void panelTablero1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelTablero1MouseClicked
        // TODO add your handling code here:
//        System.out.println(evt.getX());
//        System.out.println(evt.getY());
        if (dados[0] == -1 && dados[1] == -1) {
            labelNotificaciones.setText("No puede mover.");
            return;
        }
        if (fichaSeleccionada == null) {
            for (int i = 0; i < 4; i++) {
                for (int j = 3; j >= 0; j--) {
                    if (panelTablero1.fichas[i][j].contains(evt.getX(), evt.getY())) {
                        panelTablero1.fichas[i][j].setSeleccionado(true);
                        fichaSeleccionada = panelTablero1.fichas[i][j];
                        return;//hace falta hacer return para que no seleccione 2 fichas al tiempo
                    }
                }
            }
        } else {
            //hay ficha seleccionada
            for (int i = 0; i < 17; i++) {
                for (int j = 0; j < 4; j++) {
                    if (panelTablero1.celdas[i][j].contains(evt.getX(), evt.getY())) {
                        if (getCtrlReglas().movimientoValido(dados, fichaSeleccionada.getPosicionActual(), panelTablero1.celdas[i][j].getPosicion())) {
                            fichaSeleccionada.moverseHasta(panelTablero1.celdas[i][j]);
                            if (comer(fichaSeleccionada, i)) {
                                System.out.println("comi√≥");
                            }
                            fichaSeleccionada.setSeleccionado(false);
                            fichaSeleccionada = null;
                            labelNotificaciones.setText("");
                            if (dados[0] == -1 && dados[1] == -1) {
                                labelNotificaciones.setText("Acab√≥");
                            }
                            return;
                        }
                    }
                }
            }
            //para comprobar si est√° dado clic en el cielo
            for (int i = 0; i < 8; i++) {
                if (panelTablero1.celdas[i][4].contains(evt.getX(), evt.getY())) {
                    if (fichaSeleccionada.getContadorDeCeldas() >= 52) {
                        if (fichaSeleccionada.getContadorDeCeldas() <= 63) {
                            fichaSeleccionada.setContadorDeCeldas(fichaSeleccionada.getContadorDeCeldas() + 5);
                        }
                        if (getCtrlReglas().movimientoValidoParaCielo(dados, fichaSeleccionada.getContadorDeCeldas(), panelTablero1.celdas[i][4].getPosicion())) {
                            //fichaSeleccionada.setContadorDeCeldas(fichaSeleccionada.getContadorDeCeldas()+5);
                            if (i == 7) {
                                JOptionPane.showMessageDialog(this, "La ficha ha llegado al cielo!!!");
                                labelNotificaciones.setText("");
                                fichaSeleccionada.x = -100;
                                fichaSeleccionada.y = -100;
                                fichaSeleccionada = null;
                                return;
                            }
                            fichaSeleccionada.moverseEnCieloHasta(panelTablero1.celdas[i][4]);
                            fichaSeleccionada.setSeleccionado(false);
                            fichaSeleccionada = null;
                            labelNotificaciones.setText("");
                            return;
                        }
                    }
                }
            }
            labelNotificaciones.setText("Movimiento inv√°lido");
            fichaSeleccionada.setSeleccionado(false);
            fichaSeleccionada = null;
        }

    }//GEN-LAST:event_panelTablero1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        b = !b;
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:        
        if (!agente.getColorJugador().equalsIgnoreCase(labelColor.getText())) {
            labelNotificaciones.setText("No es tu turno :P");
            return;
        }
        if (labelNotificaciones.getText().contains("carcel")) {
            System.out.println("1");
            intentarSalirDeCarcel();
        } else {
            moverse();
        }
//        if (labelNotificaciones.getText().contains("sale")) {
//            moverse();
//        }
//        jButton2.doClick();
//        System.out.println("label notificacioens: "+labelNotificaciones.getName());
//        if (!getCtrlReglas().estaEnCarcel() || labelNotificaciones.getText()==null) {
//            System.out.println("jugada simple");
//            agente.validarMto(dados, labelNotificaciones);
//            if (labelNotificaciones.getText().contains("Acab√≥") && labelDado0.getText().equals(labelDado1.getText())) {
//                lanzarDados();
//                jButton4.doClick();
//            } else {
//                System.out.println("llamando al otro");
//                jButton5.doClick();
//            }
//            return;
//        }
//        new Thread() {
//            @Override
//            public void run() {
//                int limite = 2;
//                for (int i = 0; i < limite; i++) {
//                    try {
//                        Thread.sleep(2000);
//                        if (labelNotificaciones.getText().contains("Carcel")) {
//                            jButton2.doClick();
//                            if (labelNotificaciones.getText().contains("sale")) {
//                                limite = limite + 2;
//                            }
//                        } else if (labelNotificaciones.getText().contains("sale")) {
//                            jButton2.doClick();
//                            agente.validarMto(dados, labelNotificaciones);
//                            panelTablero1.repaint();
//                            if (!labelNotificaciones.getText().contains("Acab√≥")) {
//                                return;
//                            }
//                        } else if (labelNotificaciones.getText().contains("Acab√≥") && labelDado0.getText().equals(labelDado1.getText())) {
//                            limite = limite + 2;
//                            jButton2.doClick();
//                            agente.validarMto(dados, labelNotificaciones);
//                            lanzarDados();
//                            panelTablero1.repaint();
//                        } else if (labelNotificaciones.getText().contains("Acab√≥") || labelNotificaciones.getText().contains("carcel")) {
//                            System.out.println("llamando al otro");
//                            jButton5.doClick();
//                        }
//                        if (labelNotificaciones.getText().contains("intentos")) {
//                            System.out.println("llamando al otro");
//                            jButton5.doClick();
//                        }
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(FormTablero.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }                
//            }
//        }.start();
//        System.out.println("fin mov auto");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:        
        GuiEvent evento = new GuiEvent(evt, 1);
        evento.addParameter(new CtrlJSON().generarJSON(panelTablero1.fichas));
        agente.postGuiEvent(evento);
        //panelTablero1.fichas = agente.getFichas();
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel labelColor;
    private javax.swing.JLabel labelDado0;
    private javax.swing.JLabel labelDado1;
    private javax.swing.JLabel labelNotificaciones;
    private Vista.PanelTablero panelTablero1;
    // End of variables declaration//GEN-END:variables

    /**
     * ingresa en el vector 2 n√∫mero aleatorios
     */
    public void lanzarDados() {
        for (int i = 0; i < dados.length; i++) {
            int x = (int) (Math.round(Math.random() * 6));
            if (x == 0) {
                dados[i] = 6;
            } else {
                dados[i] = x;
            }
        }
        labelDado0.setText(String.valueOf(dados[0]));
        labelDado1.setText(String.valueOf(dados[1]));
    }

    void lanzarDados2() {
        dados[0] = 1;
        dados[1] = 1;
        labelDado0.setText(String.valueOf(dados[0]));
        labelDado1.setText(String.valueOf(dados[1]));
    }

    void lanzarDados3() {
        dados[0] = 2;
        dados[1] = 1;
        labelDado0.setText(String.valueOf(dados[0]));
        labelDado1.setText(String.valueOf(dados[1]));
    }

    /**
     * pone la ficha del color ingresado hasta la celda de salida
     *
     * @param color 0:rojo, 1:verde, 2:azul, 3:amarillo
     */
    private void SacarDeCarcel(int color) {
        for (int i = 0; i < 4; i++) {
            panelTablero1.fichas[color][i].moverseHasta(panelTablero1.celdas[4][color]);
            panelTablero1.fichas[color][i].setContadorDeCeldas(0);
        }
    }

    private void SacarDeCarcel(String color) {
        int numColor = -1;
        switch (color) {
            case "rojo":
                numColor = 0;
                break;
            case "verde":
                numColor = 1;
                break;
            case "azul":
                numColor = 2;
                break;
            case "amarillo":
                numColor = 3;
                break;
        }
        for (int i = 0; i < 4; i++) {
            panelTablero1.fichas[numColor][i].moverseHasta(panelTablero1.celdas[4][numColor]);
            panelTablero1.fichas[numColor][i].setContadorDeCeldas(0);
        }
    }

    /**
     * comprueba si come dependiendo si no esta en seguro o salida, se los come
     * a todos los de la misma celda
     *
     * @param fichaSeleccionada ficha que se movi√≥
     * @param x columna de la matriz de celdas
     * @param y fila de la matriz de celdas
     * @return true si come alguna ficha
     */
    private boolean comer(Ficha fichaSeleccionada, int x) {
        boolean b = false;
        System.out.println("Q" + fichaSeleccionada.getPosicionActual());
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (panelTablero1.fichas[i][j].getPosicionActual() == fichaSeleccionada.getPosicionActual() && !ctrlReglas.esSeguroOSalida(x) && fichaSeleccionada.getIndiceColor() != i) {
                    panelTablero1.fichas[i][j].mandarACarcel();
                    b = true;
                }
            }
        }
        return b;
    }

    public void setFichas(Ficha[][] fichas) {
        panelTablero1.fichas = fichas;
    }

    /**
     * @return the ctrlReglas
     */
    public CtrlReglas getCtrlReglas() {
        return ctrlReglas;
    }

    /**
     * @param ctrlReglas the ctrlReglas to set
     */
    public void setCtrlReglas(CtrlReglas ctrlReglas) {
        this.ctrlReglas = ctrlReglas;
    }

    public void accionarMovimientoAutom() {
        dados[0] = -1;
        dados[1] = -1;
        jButton4.doClick();
        System.out.println("ejecutando accionar auto");
    }

    public void intentarSalirDeCarcel() {
        setEnabled(false);
        new Thread() {
            @Override
            public void run() {
                for (int i = 0; i < 3; i++) {
                    lanzarDados();
                    if (dados[0] == dados[1]) {
                        setEnabled(true);
                        SacarDeCarcel(agente.getColorJugador());
                        labelNotificaciones.setText("sale");
                        dados[0] = -1;
                        dados[1] = -1;
                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(FormTablero.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        moverse();
                        return;
                    }
                    labelNotificaciones.setText("Carcel. Intentos: " + (i + 1));                    
                    
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FormTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                labelNotificaciones.setText("No puede hacer m√°s intentos para salir de la carcel");
                setEnabled(true);
                jButton5.doClick();
            }
        }.start();
    }

    public void moverse() {
        new Thread() {
            boolean bandera = true;
            int contadorDePares=0;
            @Override
            public void run() {
                while (bandera) {
                    lanzarDados();
                    if (dados[0] != dados[1]) {
                        bandera = false;
                    }
                    else{
                        contadorDePares++;
                        if(contadorDePares==3){
                            JOptionPane.showMessageDialog(null, "3 pares!!");
                        }
                    }
                    agente.validarMto(dados, labelNotificaciones);
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(FormTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }          
                jButton5.doClick();
            }
        }.start();

    }
}
